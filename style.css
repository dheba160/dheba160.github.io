/* Keep all the previous styles from body to the footer... */

/* --------- Animations --------- */
.fade-in {
    opacity: 0;
    animation: fadeIn 1.5s 0.2s forwards; /* Added a slight delay */
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* --------- New Earnings Widget Styles --------- */
#earnings-widget {
    position: fixed;
    bottom: 20px;
    left: 20px;
    background: rgba(255, 255, 255, 0.1); /* Semi-transparent white */
    backdrop-filter: blur(15px); /* The "glass" effect */
    -webkit-backdrop-filter: blur(15px); /* For Safari compatibility */
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 15px;
    z-index: 1001;
    color: #fff;
    font-size: 14px;
    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.2);
    overflow: hidden; /* Ensures content respects the border-radius */
    animation: fadeIn 1s 0.5s forwards; /* The widget also fades in */
    opacity: 0;
}

.widget-content {
    padding: 15px 20px;
}

.widget-line-1, .widget-line-2 {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.widget-line-1 {
    margin-bottom: 10px;
}

#earnings-widget span {
    color: rgba(255, 255, 255, 0.8);
}

#earnings-widget select {
    background: rgba(0, 0, 0, 0.3);
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 5px 10px;
    margin-left: 10px;
    font-family: 'Poppins', sans-serif;
    outline: none;
}

#earnings-display {
    font-size: 28px;
    font-weight: 600;
    color: #fff;
    margin-right: 10px;
    line-height: 1;
}

.widget-line-2 .subtext {
    font-size: 12px;
    font-weight: 300;
    text-align: right;
}


/* --------- Responsive Design for the Widget --------- */
@media(max-width: 768px) {
    #earnings-widget {
        left: 10px;
        right: 10px;
        bottom: 10px;
    }

    #earnings-display {
        font-size: 24px;
    }
}```

---

### **3. `script.js` (The New Animation Engine)**

This script is completely rewritten to be smoother and maintain continuity.

```javascript
document.addEventListener('DOMContentLoaded', () => {
    
    // --- Data and DOM Elements ---
    const earningsPerSecond = {
        bezos: 985,
        musk: 631,
        trump: 12,
        page: 951,
        arnault: 196,
        zuckerberg: 469,
        gates: 117
    };
    const personSelect = document.getElementById('person-select');
    const earningsDisplay = document.getElementById('earnings-display');

    // --- State and Timing Variables ---
    let selectedPerson = 'bezos';
    const startTime = Date.now(); // Record the exact time the page was loaded. This is the key to continuity.
    let animationFrameId;

    /**
     * The main animation loop.
     * This function runs on every frame the browser can render, making the animation super smooth.
     */
    function animateEarnings() {
        // 1. Calculate total elapsed time since the page loaded.
        const elapsedTimeInMs = Date.now() - startTime;
        
        // 2. Get the earnings rate for the currently selected person.
        const ratePerSecond = earningsPerSecond[selectedPerson];
        
        // 3. Calculate the total earnings for the entire elapsed time.
        const currentEarnings = (elapsedTimeInMs / 1000) * ratePerSecond;
        
        // 4. Update the display with a formatted currency string.
        earningsDisplay.textContent = `$${currentEarnings.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
        
        // 5. Request the next animation frame to continue the loop.
        animationFrameId = requestAnimationFrame(animateEarnings);
    }

    // --- Event Listener ---
    // When the user selects a new person, just update the variable.
    // The animation loop will automatically pick up the new rate on the next frame.
    personSelect.addEventListener('change', (e) => {
        selectedPerson = e.target.value;
    });

    // --- Initial Call ---
    // Start the animation loop.
    animateEarnings();
});
